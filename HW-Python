# Задача 10: На столе лежат n монеток. Некоторые из них лежат вверх решкой, а некоторые – гербом. 
# Определите минимальное число монеток, которые нужно перевернуть, 
# чтобы все монетки были повернуты вверх одной и той же стороной. 
# Выведите минимальное количество монет, которые нужно перевернуть

# n = int(input("Введите количество монет"))
# heads = 0
# tails = 0
# for i in range(n):
#     j = int(input("Орел - введите 1; Решка - введите 2: "))
#     if j == 1: heads += 1
#     else: tails += 1
# if heads < tails: print(f"Количество монет, которые нужно перевернуть: {heads}")
# elif heads == tails: print(f"Количество монеток одинаковое")
# else: print((f"Количество монет, которые нужно перевернуть: {tails}"))

# Задача 12: Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. 
# Петя помогает Кате по математике. Он задумывает два натуральных числа X и Y (X,Y≤1000), 
# а Катя должна их отгадать. Для этого Петя делает две подсказки. 
# Он называет сумму этих чисел S и их произведение P. Помогите Кате отгадать задуманные Петей числа.

# x = int(input("Введите число от 1 до 1000"))
# y = int(input("Введите число от 1 до 1000"))
# s = x + y
# p = x * y
# x1 = int((s - ((-s) ** 2 - 4 * p) ** 0.5) / 2)
# y1 = int((s + ((-s) ** 2 - 4 * p) ** 0.5) / 2)
# print(x1, y1) 

# Задача 14: Требуется вывести все целые степени двойки (т.е. числа вида 2k), 
# не превосходящие числа N.

# n = int(input("Введите число "))
# j = 1
# while j <= n:
#     print(j, end = ', ')
#     j = j*2

# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. 
# n — кол-во элементов первого множества. m — кол-во элементов второго множества.
# Затем пользователь вводит сами элементы множеств.

# from random import randint
# n = int(input('Введите первое число: '))
# list1 = [randint(0, 20) for i in range(n)]
# m = int(input('Введите второе число: '))
# list2 = [randint(0, 20) for j in range(m)]
# print(f"Список 1 : {list1}")
# print(f"Список 2 : {list2}")
# list_1 = list(set(list1))
# list_2 = list(set(list2))
# print(f"Уникальный список 1 : {list_1}")
# print(f"Уникальный список 2 : {list_2}")
# list_uniq = []
# list_uniq = list(set(list_1) & set(list_2))
# list_uniq = sorted(list_uniq)
# print(f"Список с одинаковыми числами: {list_uniq}")

# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. 
# Она растёт на круглой грядке, причём кусты высажены только по окружности. 
# Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, 
# поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники.
# Эта система состоит из управляющего модуля и нескольких собирающих модулей. 
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, 
# собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, 
# которое может собрать за один заход собирающий модуль, 
# находясь перед некоторым кустом заданной во входном файле грядки.

# from random import randint
# n = int(input('Введите количество кустов: '))
# list1 = list(randint(1, 4) for i in range(n)) 
# print(list1)
# a = int(input('Введите номер куста: '))
# res = 0
# if a == 1:  
#     res = list1[0] + list1[1] + list1[-1]
# elif a == (len(list1)): 
#     res = list1[-2] + list1[-1] + list1[0]
# else:  
#     res = list1[a - 1] + list1[a - 2] + list1[a]
# print(f"Вывод количества ягод, если модуль стоит перед {a} кустом: -> {res} <-")

# Задача 30:  Заполните массив элементами арифметической прогрессии. 
# Её первый элемент, разность и количество элементов нужно ввести с клавиатуры. 
# Формула для получения n-го члена прогрессии: an = a1 + (n-1) * d.
# Каждое число вводится с новой строки.

# a1 = 7
# d = 2
# n = 5
# for i in range(n):
#     print(a1 + i * d, end=' ')

# Задача 32: Определить индексы элементов массива (списка), 
# значения которых принадлежат заданному диапазону 
# (т.е. не меньше заданного минимума и не больше заданного максимума)

# list1 = [-5, 9, 0, 3, -1, -2, 1, 4, -2, 10, 2, 0, -9, 8, 10, -9, 0, -5, -5, 7]
# print(list1)
# list2 = []
# max = int(input('введите максимальное число диапазона: '))
# min = int(input('введите минимальное число диапазона: '))
# for i in range(len(list1)):
#     if min <= list1[i] <= max:
#         print(i, end=' ')

# Задача 34:  Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм.
# Поскольку разобраться в его кричалках не настолько просто,
# насколько легко он их придумывает, Вам стоит написать программу.
# Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв) в каждой фразе стихотворения одинаковое.
# Фраза может состоять из одного слова, если во фразе несколько слов, то они разделяются дефисами.
# Фразы отделяются друг от друга пробелами. Стихотворение  Винни-Пух вбивает в программу с клавиатуры.
# В ответе напишите “Парам пам-пам”, если с ритмом все в порядке и “Пам парам”, если с ритмом все не в порядке
#
# *Пример:*
#
# **Ввод:** пара-ра-рам рам-пам-папам па-ра-па-да
#     **Вывод:** Парам пам-пам

# def vini(rifma):
#     rifma = rifma.split()
#     list1 = []
#     for word in rifma:
#         sum = 0
#         for i in word:
#             if i in 'аеёиоуыэюя':
#                 sum += 1
#                 list1.append(sum)
#     return (len(list1) == list1.count(list1[0]))
#
# song = 'пара-ра-рам рам-пам-папам па-ра-па-дам'
# print(song)
# if vini(song):
#     print('Парам пам-пам')
# else:
#     print('Пам парам')

# Задача 36: Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6),
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и столбца.
# Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны.
# Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля).
# Примечание: бинарной операцией называется любая операция,
# у которой ровно два аргумента, как, например, у операции умножения.
#
# *Пример:*
#
# **Ввод:** `print_operation_table(lambda x, y: x * y) `
# **Вывод:**
# 1 2 3 4 5 6
#
# 2 4 6 8 10 12
# 3 6 9 12 15 18
# 4 8 12 16 20 24
# 5 10 15 20 25 30
# 6 12 18 24 30 36


# def print_operation_table(operation, num_rows=6, num_columns=6):
#     binar = [[operation(i, j) for j in range(1, num_columns + 1)] for i in range(1, num_rows + 1)]
#     for i in binar:
#         print([f"{x: > 3}" for x in i])
#
# print_operation_table(lambda x, y: x * y)
